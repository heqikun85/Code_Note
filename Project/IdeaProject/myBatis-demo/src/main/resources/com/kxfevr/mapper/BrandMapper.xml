<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace
-->
<mapper namespace="com.kxfevr.mapper.BrandMapper">
    <!--
        id: 唯一标识
        type: 映射类型，支持别名
    -->
    <resultMap id="brandResult" type="brand">
        <!--
            id: 完成主键字段的映射
            column: 表的列名
            property: 实体类的属性名
            result: 完成一般字段的映射
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResult">
        select * from tb_brand;
    </select>

    <select id="selectById" parameterType="int" resultType="brand">
        select * from tb_brand where id <![CDATA[ < ]]> #{id};
    </select>


    <select id="selectByCondition1" resultMap="brandResult">
        select * from tb_brand
        where
            status = #{status}
            and company_name like #{companyName}
            and brand_name like #{brandName}
    </select>
    <!-- 动态条件查询 -->
    <select id="selectByCondition" resultMap="brandResult">
        select * from tb_brand
        <where>
            <choose><!--类似于switch-->
                <when test="status != null"><!--类似于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != '' ">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>

    <select id="selectByCondition2" resultType="com.kxfevr.entity.Brand">
        select * from tb_brand;
        <!--SQL语句，主键不能为空，用where标签来避免报错-->
        <where>
            <!-- if:条件判断块，test:判断条件表达式，and不能忘 -->
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName !=''" >
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

<<<<<<< HEAD
    <insert id="add2" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <update id="update2">
        update tb_brand set brand_name = #{brandName},
        company_name = #{companyName},
        ordered = #{ordered},
        description = #{description},
        status = #{status}
        where id = #{id};
    </update>

=======
    <update id="update2">
        update tb_brand set brand_name = #{brandName},
        company_name = #{companyName},
        ordered = #{ordered},
        description = #{description},
        status = #{status}
        where id = #{id};
    </update>

>>>>>>> origin/main
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id};
    </update>

    <delete id="delete">
        delete from tb_brand where id = #{id};
    </delete>

<<<<<<< HEAD
    <!--
    mybatis会将数组参数，封装为一个Map集合:
    *默认:array = 数组
    *使用@Param注解改变map集合的默认key的名称
    -->
    <delete id="delete2">
        delete from tb_brand where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
=======
    <delete id="delete2">
        <!-- 待补充 -->
>>>>>>> origin/main
    </delete>

</mapper>
